
DO_16_R230.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0c  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037f  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c6  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000235  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>
#include "comInterface.cpp"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	69 97       	sbiw	r28, 0x19	; 25
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	
	bool hasHandledClckPulse;

	public: ICOM () {
		
		doRead = false;
  94:	19 82       	std	Y+1, r1	; 0x01
		recivedData = {};
  96:	1b 82       	std	Y+3, r1	; 0x03
  98:	1a 82       	std	Y+2, r1	; 0x02
		recivedDataLength = 0;
  9a:	1d 82       	std	Y+5, r1	; 0x05
  9c:	1c 82       	std	Y+4, r1	; 0x04
		remainingRecivePackets = 0;
  9e:	1f 82       	std	Y+7, r1	; 0x07
  a0:	1e 82       	std	Y+6, r1	; 0x06
		byteBuffer = 0;
  a2:	19 86       	std	Y+9, r1	; 0x09
  a4:	18 86       	std	Y+8, r1	; 0x08
		byteBufferPointer = 0;
  a6:	1b 86       	std	Y+11, r1	; 0x0b
  a8:	1a 86       	std	Y+10, r1	; 0x0a
		
		doSend = false;
  aa:	1c 86       	std	Y+12, r1	; 0x0c
		sendData = {};
  ac:	1e 86       	std	Y+14, r1	; 0x0e
  ae:	1d 86       	std	Y+13, r1	; 0x0d
		sendDataLength = 0;
  b0:	18 8a       	std	Y+16, r1	; 0x10
  b2:	1f 86       	std	Y+15, r1	; 0x0f
		remainingSendPackets = 0;
  b4:	1a 8a       	std	Y+18, r1	; 0x12
  b6:	19 8a       	std	Y+17, r1	; 0x11
		byteBuffer2 = 0;
  b8:	1c 8a       	std	Y+20, r1	; 0x14
  ba:	1b 8a       	std	Y+19, r1	; 0x13
		byteBufferPointer2 = 0;
  bc:	1e 8a       	std	Y+22, r1	; 0x16
  be:	1d 8a       	std	Y+21, r1	; 0x15
		
		hasHandledClckPulse = false;
  c0:	1f 8a       	std	Y+23, r1	; 0x17
		remainingSendPackets = data[0];
		sendDataLength = *(&data + 1) - data;
	}
	
	public: bool isDataSend() {
		return sendDataLength == 0 && !isSending();
  c2:	8f 85       	ldd	r24, Y+15	; 0x0f
  c4:	98 89       	ldd	r25, Y+16	; 0x10
  c6:	89 2b       	or	r24, r25
  c8:	61 f4       	brne	.+24     	; 0xe2 <main+0x62>
	}

	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
  ca:	89 89       	ldd	r24, Y+17	; 0x11
  cc:	9a 89       	ldd	r25, Y+18	; 0x12
  ce:	18 16       	cp	r1, r24
  d0:	19 06       	cpc	r1, r25
  d2:	14 f4       	brge	.+4      	; 0xd8 <main+0x58>
  d4:	8c 85       	ldd	r24, Y+12	; 0x0c
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x5a>
  d8:	80 e0       	ldi	r24, 0x00	; 0
		remainingSendPackets = data[0];
		sendDataLength = *(&data + 1) - data;
	}
	
	public: bool isDataSend() {
		return sendDataLength == 0 && !isSending();
  da:	81 11       	cpse	r24, r1
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x66>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <main+0x68>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x68>
  e6:	80 e0       	ldi	r24, 0x00	; 0
	ICOM com;
	
	while(1)
    {
		
		if (com.isDataSend() || !com.isSending()) {
  e8:	81 11       	cpse	r24, r1
  ea:	0e c0       	rjmp	.+28     	; 0x108 <main+0x88>
	}

	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
  ec:	29 89       	ldd	r18, Y+17	; 0x11
  ee:	3a 89       	ldd	r19, Y+18	; 0x12
  f0:	12 16       	cp	r1, r18
  f2:	13 06       	cpc	r1, r19
  f4:	2c f4       	brge	.+10     	; 0x100 <main+0x80>
  f6:	9c 85       	ldd	r25, Y+12	; 0x0c
  f8:	91 11       	cpse	r25, r1
  fa:	03 c0       	rjmp	.+6      	; 0x102 <main+0x82>
  fc:	98 2f       	mov	r25, r24
  fe:	01 c0       	rjmp	.+2      	; 0x102 <main+0x82>
 100:	98 2f       	mov	r25, r24
 102:	91 11       	cpse	r25, r1
 104:	01 c0       	rjmp	.+2      	; 0x108 <main+0x88>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	88 23       	and	r24, r24
 10a:	d1 f0       	breq	.+52     	; 0x140 <main+0xc0>
			
			int* arr = {};
			arr[0] = 1;
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
			arr[1] = 2;
 118:	a2 e0       	ldi	r26, 0x02	; 2
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	0b 2e       	mov	r0, r27
 11e:	ac 93       	st	X, r26
 120:	11 96       	adiw	r26, 0x01	; 1
 122:	0c 92       	st	X, r0
 124:	19 8e       	std	Y+25, r1	; 0x19
 126:	18 8e       	std	Y+24, r1	; 0x18
		return data;
	}

	public: void setSendData(int* data)
	{
		sendData = data;
 128:	1e 86       	std	Y+14, r1	; 0x0e
 12a:	1d 86       	std	Y+13, r1	; 0x0d
		remainingSendPackets = data[0];
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	9a 8b       	std	Y+18, r25	; 0x12
 132:	89 8b       	std	Y+17, r24	; 0x11
		sendDataLength = *(&data + 1) - data;
 134:	8a 8d       	ldd	r24, Y+26	; 0x1a
 136:	9b 8d       	ldd	r25, Y+27	; 0x1b
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	98 8b       	std	Y+16, r25	; 0x10
 13e:	8f 87       	std	Y+15, r24	; 0x0f
		
	}

	public: bool hasData()
	{
		return recivedDataLength > 0 && !isReading();
 140:	8c 81       	ldd	r24, Y+4	; 0x04
 142:	9d 81       	ldd	r25, Y+5	; 0x05
 144:	18 16       	cp	r1, r24
 146:	19 06       	cpc	r1, r25
 148:	64 f4       	brge	.+24     	; 0x162 <main+0xe2>
	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
	}
	
	public: bool isReading() {
		return remainingRecivePackets > 0 && doRead;
 14a:	8e 81       	ldd	r24, Y+6	; 0x06
 14c:	9f 81       	ldd	r25, Y+7	; 0x07
 14e:	18 16       	cp	r1, r24
 150:	19 06       	cpc	r1, r25
 152:	14 f4       	brge	.+4      	; 0x158 <main+0xd8>
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	01 c0       	rjmp	.+2      	; 0x15a <main+0xda>
 158:	80 e0       	ldi	r24, 0x00	; 0
		
	}

	public: bool hasData()
	{
		return recivedDataLength > 0 && !isReading();
 15a:	81 11       	cpse	r24, r1
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0xe6>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	03 c0       	rjmp	.+6      	; 0x168 <main+0xe8>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	01 c0       	rjmp	.+2      	; 0x168 <main+0xe8>
 166:	80 e0       	ldi	r24, 0x00	; 0
			com.setSendData(arr);
			
		}
		
		if (com.hasData()) {
 168:	88 23       	and	r24, r24
 16a:	21 f0       	breq	.+8      	; 0x174 <main+0xf4>
	}
	
	public: int* getData()
	{
		recivedDataLength = 0;
 16c:	1d 82       	std	Y+5, r1	; 0x05
 16e:	1c 82       	std	Y+4, r1	; 0x04
		int* data = recivedData;
		recivedData = {};
 170:	1b 82       	std	Y+3, r1	; 0x03
 172:	1a 82       	std	Y+2, r1	; 0x02
		
	}

	public: void update() {
		
		bool clckHigh = (PINC & PINC_CLCK) > 0;
 174:	86 b1       	in	r24, 0x06	; 6
 176:	80 71       	andi	r24, 0x10	; 16
 178:	90 e0       	ldi	r25, 0x00	; 0
		
		if (clckHigh && !hasHandledClckPulse) {
 17a:	18 16       	cp	r1, r24
 17c:	19 06       	cpc	r1, r25
 17e:	0c f0       	brlt	.+2      	; 0x182 <main+0x102>
 180:	fc c0       	rjmp	.+504    	; 0x37a <main+0x2fa>
 182:	2f 89       	ldd	r18, Y+23	; 0x17
 184:	21 11       	cpse	r18, r1
 186:	f9 c0       	rjmp	.+498    	; 0x37a <main+0x2fa>
			
			hasHandledClckPulse = true;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	8f 8b       	std	Y+23, r24	; 0x17
	public: bool isDataSend() {
		return sendDataLength == 0 && !isSending();
	}

	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
 18c:	e9 89       	ldd	r30, Y+17	; 0x11
 18e:	fa 89       	ldd	r31, Y+18	; 0x12
 190:	1e 16       	cp	r1, r30
 192:	1f 06       	cpc	r1, r31
 194:	1c f4       	brge	.+6      	; 0x19c <main+0x11c>
 196:	8c 85       	ldd	r24, Y+12	; 0x0c
 198:	81 11       	cpse	r24, r1
 19a:	28 2f       	mov	r18, r24
		
		if (clckHigh && !hasHandledClckPulse) {
			
			hasHandledClckPulse = true;
			
			if (!isSending()) {
 19c:	21 11       	cpse	r18, r1
 19e:	97 c0       	rjmp	.+302    	; 0x2ce <main+0x24e>
				
				// get recived Value
				bool recivedBit1 = (PINC & PINC_COM_1) > 0;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	30 9b       	sbis	0x06, 0	; 6
 1a4:	80 e0       	ldi	r24, 0x00	; 0
				bool recivedBit2 = (PINC & PINC_COM_2) > 0;
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	31 9b       	sbis	0x06, 1	; 6
 1aa:	60 e0       	ldi	r22, 0x00	; 0
				byteBuffer |= (recivedBit1 << (byteBufferPointer + 0));
 1ac:	4a 85       	ldd	r20, Y+10	; 0x0a
 1ae:	5b 85       	ldd	r21, Y+11	; 0x0b
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	04 2e       	mov	r0, r20
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0x13a>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0x136>
 1be:	a8 85       	ldd	r26, Y+8	; 0x08
 1c0:	b9 85       	ldd	r27, Y+9	; 0x09
 1c2:	8a 2b       	or	r24, r26
 1c4:	9b 2b       	or	r25, r27
				byteBuffer |= (recivedBit2 << (byteBufferPointer + 1));
 1c6:	da 01       	movw	r26, r20
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <main+0x152>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	aa 95       	dec	r26
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <main+0x14e>
 1d6:	86 2b       	or	r24, r22
 1d8:	97 2b       	or	r25, r23
 1da:	99 87       	std	Y+9, r25	; 0x09
 1dc:	88 87       	std	Y+8, r24	; 0x08
				byteBufferPointer += 2;
 1de:	4e 5f       	subi	r20, 0xFE	; 254
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	5b 87       	std	Y+11, r21	; 0x0b
 1e4:	4a 87       	std	Y+10, r20	; 0x0a
				
				if (byteBufferPointer >= 8) {
 1e6:	48 30       	cpi	r20, 0x08	; 8
 1e8:	51 05       	cpc	r21, r1
 1ea:	0c f4       	brge	.+2      	; 0x1ee <main+0x16e>
 1ec:	6a cf       	rjmp	.-300    	; 0xc2 <main+0x42>
					
					int recived = byteBuffer;
					byteBuffer = 0;
 1ee:	19 86       	std	Y+9, r1	; 0x09
 1f0:	18 86       	std	Y+8, r1	; 0x08
					byteBufferPointer = 0;
 1f2:	1b 86       	std	Y+11, r1	; 0x0b
 1f4:	1a 86       	std	Y+10, r1	; 0x0a
					
					if (remainingRecivePackets == 0 && recived > 0 && !isSending() && !isReading()) {
 1f6:	4e 81       	ldd	r20, Y+6	; 0x06
 1f8:	5f 81       	ldd	r21, Y+7	; 0x07
 1fa:	41 15       	cp	r20, r1
 1fc:	51 05       	cpc	r21, r1
 1fe:	e1 f4       	brne	.+56     	; 0x238 <main+0x1b8>
 200:	18 16       	cp	r1, r24
 202:	19 06       	cpc	r1, r25
 204:	cc f4       	brge	.+50     	; 0x238 <main+0x1b8>
	public: bool isDataSend() {
		return sendDataLength == 0 && !isSending();
	}

	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
 206:	1e 16       	cp	r1, r30
 208:	1f 06       	cpc	r1, r31
 20a:	2c f4       	brge	.+10     	; 0x216 <main+0x196>
 20c:	3c 85       	ldd	r19, Y+12	; 0x0c
 20e:	31 11       	cpse	r19, r1
 210:	03 c0       	rjmp	.+6      	; 0x218 <main+0x198>
 212:	32 2f       	mov	r19, r18
 214:	01 c0       	rjmp	.+2      	; 0x218 <main+0x198>
 216:	32 2f       	mov	r19, r18
					
					int recived = byteBuffer;
					byteBuffer = 0;
					byteBufferPointer = 0;
					
					if (remainingRecivePackets == 0 && recived > 0 && !isSending() && !isReading()) {
 218:	31 11       	cpse	r19, r1
 21a:	0e c0       	rjmp	.+28     	; 0x238 <main+0x1b8>
	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
	}
	
	public: bool isReading() {
		return remainingRecivePackets > 0 && doRead;
 21c:	14 16       	cp	r1, r20
 21e:	15 06       	cpc	r1, r21
 220:	2c f4       	brge	.+10     	; 0x22c <main+0x1ac>
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	21 11       	cpse	r18, r1
 226:	03 c0       	rjmp	.+6      	; 0x22e <main+0x1ae>
 228:	23 2f       	mov	r18, r19
 22a:	01 c0       	rjmp	.+2      	; 0x22e <main+0x1ae>
 22c:	23 2f       	mov	r18, r19
					
					int recived = byteBuffer;
					byteBuffer = 0;
					byteBufferPointer = 0;
					
					if (remainingRecivePackets == 0 && recived > 0 && !isSending() && !isReading()) {
 22e:	21 11       	cpse	r18, r1
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0x1b6>
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	01 c0       	rjmp	.+2      	; 0x238 <main+0x1b8>
 236:	23 2f       	mov	r18, r19
 238:	22 23       	and	r18, r18
 23a:	39 f0       	breq	.+14     	; 0x24a <main+0x1ca>
						
						// Set RemainingPackets to recived Value and Start Reading
						doRead = true;
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	29 83       	std	Y+1, r18	; 0x01
						remainingRecivePackets = recived;
 240:	9f 83       	std	Y+7, r25	; 0x07
 242:	8e 83       	std	Y+6, r24	; 0x06
						//recivedData = {0 };
						recivedDataLength = recived;
 244:	9d 83       	std	Y+5, r25	; 0x05
 246:	8c 83       	std	Y+4, r24	; 0x04
 248:	3c cf       	rjmp	.-392    	; 0xc2 <main+0x42>
						return;
						
						} else if (remainingSendPackets > 0 && recived == 0 && !isReading() && !isSending()) {
 24a:	1e 16       	cp	r1, r30
 24c:	1f 06       	cpc	r1, r31
 24e:	dc f4       	brge	.+54     	; 0x286 <main+0x206>
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	c9 f4       	brne	.+50     	; 0x286 <main+0x206>
	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
	}
	
	public: bool isReading() {
		return remainingRecivePackets > 0 && doRead;
 254:	14 16       	cp	r1, r20
 256:	15 06       	cpc	r1, r21
 258:	2c f4       	brge	.+10     	; 0x264 <main+0x1e4>
 25a:	39 81       	ldd	r19, Y+1	; 0x01
 25c:	31 11       	cpse	r19, r1
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x1e6>
 260:	32 2f       	mov	r19, r18
 262:	01 c0       	rjmp	.+2      	; 0x266 <main+0x1e6>
 264:	32 2f       	mov	r19, r18
						remainingRecivePackets = recived;
						//recivedData = {0 };
						recivedDataLength = recived;
						return;
						
						} else if (remainingSendPackets > 0 && recived == 0 && !isReading() && !isSending()) {
 266:	31 11       	cpse	r19, r1
 268:	0e c0       	rjmp	.+28     	; 0x286 <main+0x206>
	public: bool isDataSend() {
		return sendDataLength == 0 && !isSending();
	}

	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
 26a:	1e 16       	cp	r1, r30
 26c:	1f 06       	cpc	r1, r31
 26e:	2c f4       	brge	.+10     	; 0x27a <main+0x1fa>
 270:	2c 85       	ldd	r18, Y+12	; 0x0c
 272:	21 11       	cpse	r18, r1
 274:	03 c0       	rjmp	.+6      	; 0x27c <main+0x1fc>
 276:	23 2f       	mov	r18, r19
 278:	01 c0       	rjmp	.+2      	; 0x27c <main+0x1fc>
 27a:	23 2f       	mov	r18, r19
						remainingRecivePackets = recived;
						//recivedData = {0 };
						recivedDataLength = recived;
						return;
						
						} else if (remainingSendPackets > 0 && recived == 0 && !isReading() && !isSending()) {
 27c:	21 11       	cpse	r18, r1
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x204>
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	01 c0       	rjmp	.+2      	; 0x286 <main+0x206>
 284:	23 2f       	mov	r18, r19
 286:	22 23       	and	r18, r18
 288:	19 f0       	breq	.+6      	; 0x290 <main+0x210>
						
						// Start Sending
						doSend = true;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	8c 87       	std	Y+12, r24	; 0x0c
 28e:	19 cf       	rjmp	.-462    	; 0xc2 <main+0x42>
	public: bool isSending() {
		return remainingSendPackets > 0 && doSend;
	}
	
	public: bool isReading() {
		return remainingRecivePackets > 0 && doRead;
 290:	14 16       	cp	r1, r20
 292:	15 06       	cpc	r1, r21
 294:	1c f4       	brge	.+6      	; 0x29c <main+0x21c>
 296:	39 81       	ldd	r19, Y+1	; 0x01
 298:	31 11       	cpse	r19, r1
 29a:	23 2f       	mov	r18, r19
						doSend = true;
						return;
						
					}
					
					if (isReading()) {
 29c:	22 23       	and	r18, r18
 29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0x222>
 2a0:	10 cf       	rjmp	.-480    	; 0xc2 <main+0x42>
						
						// Add recived Value to recivedPackets and count as Packet
						recivedData[recivedDataLength - remainingRecivePackets] = recived;
 2a2:	2a 81       	ldd	r18, Y+2	; 0x02
 2a4:	3b 81       	ldd	r19, Y+3	; 0x03
 2a6:	ec 81       	ldd	r30, Y+4	; 0x04
 2a8:	fd 81       	ldd	r31, Y+5	; 0x05
 2aa:	e4 1b       	sub	r30, r20
 2ac:	f5 0b       	sbc	r31, r21
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	e2 0f       	add	r30, r18
 2b4:	f3 1f       	adc	r31, r19
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
						remainingRecivePackets--;
 2ba:	8e 81       	ldd	r24, Y+6	; 0x06
 2bc:	9f 81       	ldd	r25, Y+7	; 0x07
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	9f 83       	std	Y+7, r25	; 0x07
 2c2:	8e 83       	std	Y+6, r24	; 0x06
						
						if (remainingRecivePackets == 0) {
 2c4:	89 2b       	or	r24, r25
 2c6:	09 f0       	breq	.+2      	; 0x2ca <main+0x24a>
 2c8:	fc ce       	rjmp	.-520    	; 0xc2 <main+0x42>
							
							doRead = false;
 2ca:	19 82       	std	Y+1, r1	; 0x01
 2cc:	fa ce       	rjmp	.-524    	; 0xc2 <main+0x42>
					
				}
				
				} else {
				
				if (byteBufferPointer2 <= 0) {
 2ce:	8d 89       	ldd	r24, Y+21	; 0x15
 2d0:	9e 89       	ldd	r25, Y+22	; 0x16
 2d2:	18 16       	cp	r1, r24
 2d4:	19 06       	cpc	r1, r25
 2d6:	a4 f0       	brlt	.+40     	; 0x300 <main+0x280>
					
					byteBuffer2 = sendData[sendDataLength - remainingSendPackets];
 2d8:	2d 85       	ldd	r18, Y+13	; 0x0d
 2da:	3e 85       	ldd	r19, Y+14	; 0x0e
 2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2de:	98 89       	ldd	r25, Y+16	; 0x10
 2e0:	ac 01       	movw	r20, r24
 2e2:	4e 1b       	sub	r20, r30
 2e4:	5f 0b       	sbc	r21, r31
 2e6:	fa 01       	movw	r30, r20
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	e2 0f       	add	r30, r18
 2ee:	f3 1f       	adc	r31, r19
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	9c 8b       	std	Y+20, r25	; 0x14
 2f6:	8b 8b       	std	Y+19, r24	; 0x13
					byteBufferPointer2 = 7;
 2f8:	87 e0       	ldi	r24, 0x07	; 7
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9e 8b       	std	Y+22, r25	; 0x16
 2fe:	8d 8b       	std	Y+21, r24	; 0x15
					
				}
				
				bool sendBit1 = (byteBuffer2 & (1 << (byteBufferPointer2 - 0)));
 300:	8b 89       	ldd	r24, Y+19	; 0x13
 302:	9c 89       	ldd	r25, Y+20	; 0x14
 304:	2d 89       	ldd	r18, Y+21	; 0x15
 306:	3e 89       	ldd	r19, Y+22	; 0x16
 308:	ac 01       	movw	r20, r24
 30a:	02 2e       	mov	r0, r18
 30c:	02 c0       	rjmp	.+4      	; 0x312 <main+0x292>
 30e:	55 95       	asr	r21
 310:	47 95       	ror	r20
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <main+0x28e>
				bool sendBit2 = (byteBuffer2 & (1 << (byteBufferPointer2 - 1)));
 316:	21 50       	subi	r18, 0x01	; 1
 318:	31 09       	sbc	r19, r1
 31a:	02 c0       	rjmp	.+4      	; 0x320 <main+0x2a0>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	2a 95       	dec	r18
 322:	e2 f7       	brpl	.-8      	; 0x31c <main+0x29c>
 324:	81 70       	andi	r24, 0x01	; 1
 326:	99 27       	eor	r25, r25
				PORTC = (PORTC & ~PORTC_COM_1) | (sendBit1 ? PORTC_COM_1 : 0);
 328:	28 b1       	in	r18, 0x08	; 8
 32a:	2b 7f       	andi	r18, 0xFB	; 251
 32c:	40 ff       	sbrs	r20, 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <main+0x2b4>
 330:	34 e0       	ldi	r19, 0x04	; 4
 332:	01 c0       	rjmp	.+2      	; 0x336 <main+0x2b6>
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	23 2b       	or	r18, r19
 338:	28 b9       	out	0x08, r18	; 8
				PORTC = (PORTC & ~PORTC_COM_2) | (sendBit2 ? PORTC_COM_2 : 0);
 33a:	28 b1       	in	r18, 0x08	; 8
 33c:	27 7f       	andi	r18, 0xF7	; 247
 33e:	89 2b       	or	r24, r25
 340:	11 f0       	breq	.+4      	; 0x346 <main+0x2c6>
 342:	98 e0       	ldi	r25, 0x08	; 8
 344:	01 c0       	rjmp	.+2      	; 0x348 <main+0x2c8>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	82 2f       	mov	r24, r18
 34a:	89 2b       	or	r24, r25
 34c:	88 b9       	out	0x08, r24	; 8
				byteBufferPointer2 -= 2;
 34e:	8d 89       	ldd	r24, Y+21	; 0x15
 350:	9e 89       	ldd	r25, Y+22	; 0x16
 352:	02 97       	sbiw	r24, 0x02	; 2
 354:	9e 8b       	std	Y+22, r25	; 0x16
 356:	8d 8b       	std	Y+21, r24	; 0x15
				
				if (byteBufferPointer2 <= 0) remainingSendPackets--;
 358:	18 16       	cp	r1, r24
 35a:	19 06       	cpc	r1, r25
 35c:	2c f0       	brlt	.+10     	; 0x368 <main+0x2e8>
 35e:	89 89       	ldd	r24, Y+17	; 0x11
 360:	9a 89       	ldd	r25, Y+18	; 0x12
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	9a 8b       	std	Y+18, r25	; 0x12
 366:	89 8b       	std	Y+17, r24	; 0x11
				
				if (remainingSendPackets == 0) {
 368:	89 89       	ldd	r24, Y+17	; 0x11
 36a:	9a 89       	ldd	r25, Y+18	; 0x12
 36c:	89 2b       	or	r24, r25
 36e:	09 f0       	breq	.+2      	; 0x372 <main+0x2f2>
 370:	a8 ce       	rjmp	.-688    	; 0xc2 <main+0x42>
					
					doSend = false;
 372:	1c 86       	std	Y+12, r1	; 0x0c
					sendDataLength = 0;
 374:	18 8a       	std	Y+16, r1	; 0x10
 376:	1f 86       	std	Y+15, r1	; 0x0f
 378:	a4 ce       	rjmp	.-696    	; 0xc2 <main+0x42>
					
				}
				
			}
			
			} else if (hasHandledClckPulse && !clckHigh) {
 37a:	2f 89       	ldd	r18, Y+23	; 0x17
 37c:	22 23       	and	r18, r18
 37e:	09 f4       	brne	.+2      	; 0x382 <main+0x302>
 380:	a0 ce       	rjmp	.-704    	; 0xc2 <main+0x42>
 382:	18 16       	cp	r1, r24
 384:	19 06       	cpc	r1, r25
 386:	0c f4       	brge	.+2      	; 0x38a <main+0x30a>
 388:	9c ce       	rjmp	.-712    	; 0xc2 <main+0x42>
			hasHandledClckPulse = false;
 38a:	1f 8a       	std	Y+23, r1	; 0x17
 38c:	9a ce       	rjmp	.-716    	; 0xc2 <main+0x42>

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
